steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: "2.x"
  #     addToPath: true

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode

  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     artifact: Compilation
  #     path: $(Build.ArtifactStagingDirectory)
  #   displayName: Download compilation output
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { tar --force-local -xzf $(Build.ArtifactStagingDirectory)/compilation.tar.gz }
  #   displayName: Extract compilation output
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     "machine github.com`nlogin vscode`npassword $(github-distro-mixin-password)" | Out-File "$env:USERPROFILE\_netrc" -Encoding ASCII
  #     exec { git config user.email "vscode@microsoft.com" }
  #     exec { git config user.name "VSCode" }
  #   displayName: Prepare tooling
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro") }
  #   displayName: Merge distro
  # - powershell: |
  #     "$(VSCODE_ARCH)" | Out-File -Encoding ascii -NoNewLine .build\arch
  #     "$env:ENABLE_TERRAPIN" | Out-File -Encoding ascii -NoNewLine .build\terrapin
  #     node build/azure-pipelines/common/computeNodeModulesCacheKey.js > .build/yarnlockhash
  #   displayName: Prepare yarn cache flags
  # - task: Cache@2
  #   inputs:
  #     key: 'nodeModules | $(Agent.OS) | .build/arch, .build/terrapin, .build/yarnlockhash'
  #     path: .build/node_modules_cache
  #     cacheHitVar: NODE_MODULES_RESTORED
  #   displayName: Restore node_modules cache
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { 7z.exe x .build/node_modules_cache/cache.7z -aos }
  #   condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
  #   displayName: Extract node_modules cache
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { npx https://aka.ms/enablesecurefeed standAlone }
  #   timeoutInMinutes: 5
  #   condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'), eq(variables['ENABLE_TERRAPIN'], 'true'))
  #   displayName: Switch to Terrapin packages
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     . build/azure-pipelines/win32/retry.ps1
  #     $ErrorActionPreference = "Stop"
  #     $env:npm_config_arch="$(VSCODE_ARCH)"
  #     $env:npm_config_build_from_source="true"
  #     $env:CHILD_CONCURRENCY="1"
  #     retry { exec { yarn --frozen-lockfile } }
  #   env:
  #     ELECTRON_SKIP_BINARY_DOWNLOAD: 1
  #     PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  #   displayName: Install dependencies
  #   condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt }
  #     exec { mkdir -Force .build/node_modules_cache }
  #     exec { 7z.exe a .build/node_modules_cache/cache.7z -mx3 `@.build/node_modules_list.txt }
  #   condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
  #   displayName: Create node_modules archive
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { node build/azure-pipelines/mixin }
  #   displayName: Mix in quality
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $env:VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)"
  #     exec { yarn gulp "vscode-win32-$(VSCODE_ARCH)-min-ci" }
  #     echo "##vso[task.setvariable variable=CodeSigningFolderPath]$(agent.builddirectory)/VSCode-win32-$(VSCODE_ARCH)"
  #   displayName: Build
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $env:VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)"
  #     exec { yarn gulp "vscode-win32-$(VSCODE_ARCH)-code-helper" }
  #     exec { yarn gulp "vscode-win32-$(VSCODE_ARCH)-inno-updater" }
  #   displayName: Prepare Package
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $env:VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)"
  #     exec { yarn gulp "vscode-reh-win32-$(VSCODE_ARCH)-min-ci" }
  #     exec { yarn gulp "vscode-reh-web-win32-$(VSCODE_ARCH)-min-ci" }
  #     echo "##vso[task.setvariable variable=CodeSigningFolderPath]$(CodeSigningFolderPath),$(agent.builddirectory)/vscode-reh-win32-$(VSCODE_ARCH)"
  #   displayName: Build Server
  #   condition: and(succeeded(), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $env:VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)"
  #     exec { yarn npm-run-all -lp "electron $(VSCODE_ARCH)" "playwright-install" }
  #   displayName: Download Electron and Playwright
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { yarn electron $(VSCODE_ARCH) }
  #     exec { .\scripts\test.bat --build --tfs "Unit Tests" }
  #   displayName: Run unit tests (Electron)
  #   timeoutInMinutes: 7
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { yarn test-browser --build --browser chromium --browser firefox --tfs "Browser Unit Tests" }
  #   displayName: Run unit tests (Browser)
  #   timeoutInMinutes: 7
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { yarn --cwd test/integration/browser compile }
  #   displayName: Compile integration tests
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     # Figure out the full absolute path of the product we just built
  #     # including the remote server and configure the integration tests
  #     # to run with these builds instead of running out of sources.
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $AppRoot = "$(agent.builddirectory)\VSCode-win32-$(VSCODE_ARCH)"
  #     $AppProductJson = Get-Content -Raw -Path "$AppRoot\resources\app\product.json" | ConvertFrom-Json
  #     $AppNameShort = $AppProductJson.nameShort
  #     exec { $env:INTEGRATION_TEST_ELECTRON_PATH = "$AppRoot\$AppNameShort.exe"; $env:VSCODE_REMOTE_SERVER_PATH = "$(agent.builddirectory)\vscode-reh-win32-$(VSCODE_ARCH)"; .\scripts\test-integration.bat --build --tfs "Integration Tests" }
  #   displayName: Run integration tests (Electron)
  #   timeoutInMinutes: 10
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     exec { $env:VSCODE_REMOTE_SERVER_PATH = "$(agent.builddirectory)\vscode-reh-web-win32-$(VSCODE_ARCH)"; .\resources\server\test\test-web-integration.bat --browser firefox }
  #   displayName: Run integration tests (Browser)
  #   timeoutInMinutes: 10
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $AppRoot = "$(agent.builddirectory)\VSCode-win32-$(VSCODE_ARCH)"
  #     $AppProductJson = Get-Content -Raw -Path "$AppRoot\resources\app\product.json" | ConvertFrom-Json
  #     $AppNameShort = $AppProductJson.nameShort
  #     exec { $env:INTEGRATION_TEST_ELECTRON_PATH = "$AppRoot\$AppNameShort.exe"; $env:VSCODE_REMOTE_SERVER_PATH = "$(agent.builddirectory)\vscode-reh-win32-$(VSCODE_ARCH)"; .\resources\server\test\test-remote-integration.bat }
  #   displayName: Run remote integration tests (Electron)
  #   timeoutInMinutes: 7
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - task: PublishPipelineArtifact@0
  #   inputs:
  #     artifactName: crash-dump-windows-$(VSCODE_ARCH)
  #     targetPath: .build\crashes
  #   displayName: "Publish Crash Reports"
  #   continueOnError: true
  #   condition: failed()
  # - task: PublishTestResults@2
  #   displayName: Publish Tests Results
  #   inputs:
  #     testResultsFiles: "*-results.xml"
  #     searchFolder: "$(Build.ArtifactStagingDirectory)/test-results"
  #   condition: and(succeededOrFailed(), eq(variables['VSCODE_STEP_ON_IT'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
  # - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  #   inputs:
  #     ConnectedServiceName: "ESRP CodeSign"
  #     FolderPath: "$(CodeSigningFolderPath)"
  #     Pattern: "*.dll,*.exe,*.node"
  #     signConfigType: inlineSignParams
  #     inlineOperation: |
  #       [
  #         {
  #           "keyCode": "CP-230012",
  #           "operationSetCode": "SigntoolSign",
  #           "parameters": [
  #             {
  #               "parameterName": "OpusName",
  #               "parameterValue": "VS Code"
  #             },
  #             {
  #               "parameterName": "OpusInfo",
  #               "parameterValue": "https://code.visualstudio.com/"
  #             },
  #             {
  #               "parameterName": "Append",
  #               "parameterValue": "/as"
  #             },
  #             {
  #               "parameterName": "FileDigest",
  #               "parameterValue": "/fd \"SHA256\""
  #             },
  #             {
  #               "parameterName": "PageHash",
  #               "parameterValue": "/NPH"
  #             },
  #             {
  #               "parameterName": "TimeStamp",
  #               "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
  #             }
  #           ],
  #           "toolName": "sign",
  #           "toolVersion": "1.0"
  #         },
  #         {
  #           "keyCode": "CP-230012",
  #           "operationSetCode": "SigntoolVerify",
  #           "parameters": [
  #             {
  #               "parameterName": "VerifyAll",
  #               "parameterValue": "/all"
  #             }
  #           ],
  #           "toolName": "sign",
  #           "toolVersion": "1.0"
  #         }
  #       ]
  #     SessionTimeout: 120
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - task: UseDotNet@2
    displayName: "Install .NET Core SDK 2.x"
    inputs:
      version: 2.x

  # This is here just so the esrpcli tool is downloaded
  - task: EsrpClientTool@1
    displayName: Download ESRPClient
  #   # condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - powershell: |
      $EsrpClientTool = (gci -directory -filter EsrpClientTool_* $(Agent.RootDirectory)\_tasks | Select-Object -last 1).FullName
      $EsrpCliZip = (gci -recurse -filter esrpcli.*.zip $EsrpClientTool | Select-Object -last 1).FullName
      mkdir -p $(Agent.TempDirectory)\esrpcli
      Expand-Archive -Path $EsrpCliZip -DestinationPath $(Agent.TempDirectory)\esrpcli
      $EsrpCliDllPath = (gci -recurse -filter esrpcli.dll $(Agent.TempDirectory)\esrpcli | Select-Object -last 1).FullName

      mkdir -p .build/win32
      echo Downloading...
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest -Uri https://az764295.vo.msecnd.net/insider/0a8a4b380b1da062cbcb352c06ad13fb87e21c12/VSCode-win32-x64-1.59.0-insider.zip -OutFile .build\code-win32.zip
      echo Extracting...
      Expand-Archive -Path .build\code-win32.zip -DestinationPath .build\win32
      pushd build
      yarn
      yarn compile
      popd

      $ParamsPath = [System.IO.Path]::GetTempFileName()
      '[{"keyCode":"CP-230012","operationSetCode":"SigntoolSign","parameters":[{"parameterName":"OpusName","parameterValue":"VS Code"},{"parameterName":"OpusInfo","parameterValue":"https://code.visualstudio.com/"},{"parameterName":"Append","parameterValue":"/as"},{"parameterName":"FileDigest","parameterValue":"/fd \"SHA256\""},{"parameterName":"PageHash","parameterValue":"/NPH"},{"parameterName":"TimeStamp","parameterValue":"/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"}],"toolName":"sign","toolVersion":"1.0"},{"keyCode":"CP-230012","operationSetCode":"SigntoolVerify","parameters":[{"parameterName":"VerifyAll","parameterValue":"/all"}],"toolName":"sign","toolVersion":"1.0"}]' | Out-File -Encoding ASCII $ParamsPath

      node build\azure-pipelines\common\sign `
        $EsrpCliDllPath `
        "$(ESRP-PKI)" `
        "$(esrp-aad-username)" `
        "$(esrp-aad-password)" `
        ".build/win32" `
        '*.dll,*.exe,*.node' `
        $ParamsPath

  # - task: ESRPImportCertTask@1
  #   displayName: Import ESRP Request Signing Certificate
  #   inputs:
  #     ESRP: "ESRP CodeSign"
  #   # condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - powershell: |
  #     # .\build\azure-pipelines\win32\import-cert.ps1 $(ESRP-PKI) ESRPCertificateSubjectName
  #     .\build\azure-pipelines\win32\import-cert.ps1 $(ESRP-SSL-AADAuth) ESRPAuthCertificateSubjectName
  #   displayName: Import ESRP Certificates
  #   # condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - powershell: |
  #     .\build\azure-pipelines\win32\sign.ps1 .\build\win32\inno_updater.exe
  #   displayName: Sign something
  #   # condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - powershell: |
  #     . build/azure-pipelines/win32/exec.ps1
  #     $ErrorActionPreference = "Stop"
  #     $env:AZURE_STORAGE_ACCESS_KEY_2 = "$(vscode-storage-key)"
  #     $env:AZURE_DOCUMENTDB_MASTERKEY = "$(builds-docdb-key-readwrite)"
  #     $env:VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)"
  #     .\build\azure-pipelines\win32\prepare-publish.ps1
  #   displayName: Publish
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - publish: $(System.DefaultWorkingDirectory)\.build\win32-$(VSCODE_ARCH)\archive\$(ARCHIVE_NAME)
  #   artifact: vscode_client_win32_$(VSCODE_ARCH)_archive
  #   displayName: Publish archive
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - publish: $(System.DefaultWorkingDirectory)\.build\win32-$(VSCODE_ARCH)\system-setup\$(SYSTEM_SETUP_NAME)
  #   artifact: vscode_client_win32_$(VSCODE_ARCH)_setup
  #   displayName: Publish system setup
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - publish: $(System.DefaultWorkingDirectory)\.build\win32-$(VSCODE_ARCH)\user-setup\$(USER_SETUP_NAME)
  #   artifact: vscode_client_win32_$(VSCODE_ARCH)_user-setup
  #   displayName: Publish user setup
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - publish: $(System.DefaultWorkingDirectory)\.build\vscode-server-win32-$(VSCODE_ARCH).zip
  #   artifact: vscode_server_win32_$(VSCODE_ARCH)_archive
  #   displayName: Publish server archive
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))

  # - publish: $(System.DefaultWorkingDirectory)\.build\vscode-server-win32-$(VSCODE_ARCH)-web.zip
  #   artifact: vscode_web_win32_$(VSCODE_ARCH)_archive
  #   displayName: Publish web server archive
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'), ne(variables['VSCODE_ARCH'], 'arm64'))
